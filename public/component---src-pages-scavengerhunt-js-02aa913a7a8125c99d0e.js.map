{"version":3,"file":"component---src-pages-scavengerhunt-js-02aa913a7a8125c99d0e.js","mappings":"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","sources":["webpack://i-ups/./node_modules/@hcaptcha/react-hcaptcha/dist/esm/index.js","webpack://i-ups/./node_modules/@hcaptcha/react-hcaptcha/dist/esm/utils.js","webpack://i-ups/./src/styles/scavengerHunt.module.scss","webpack://i-ups/./src/utils/hints.js","webpack://i-ups/./src/pages/scavengerhunt.js"],"sourcesContent":["import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport * as React from 'react';\nimport { generateQuery } from \"./utils.js\";\nvar SCRIPT_ID = 'hcaptcha-api-script-id';\nvar HCAPTCHA_LOAD_FN_NAME = 'hcaptchaOnLoad'; // Prevent loading API script multiple times\n\nvar resolveFn;\nvar rejectFn;\nvar mountPromise = new Promise(function (resolve, reject) {\n  resolveFn = resolve;\n  rejectFn = reject;\n}); // Generate hCaptcha API script\n\nvar mountCaptchaScript = function mountCaptchaScript(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (document.getElementById(SCRIPT_ID)) {\n    // API was already requested\n    return mountPromise;\n  } // Create global onload callback\n\n\n  window[HCAPTCHA_LOAD_FN_NAME] = resolveFn;\n  var domain = params.apihost || \"https://js.hcaptcha.com\";\n  delete params.apihost;\n  var script = document.createElement(\"script\");\n  script.id = SCRIPT_ID;\n  script.src = domain + \"/1/api.js?render=explicit&onload=\" + HCAPTCHA_LOAD_FN_NAME;\n  script.async = true;\n\n  script.onerror = function (event) {\n    return rejectFn('script-error');\n  };\n\n  var query = generateQuery(params);\n  script.src += query !== \"\" ? \"&\" + query : \"\";\n  document.head.appendChild(script);\n  return mountPromise;\n};\n\nvar HCaptcha = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(HCaptcha, _React$Component);\n\n  function HCaptcha(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // API Methods\n\n    _this.renderCaptcha = _this.renderCaptcha.bind(_assertThisInitialized(_this));\n    _this.resetCaptcha = _this.resetCaptcha.bind(_assertThisInitialized(_this));\n    _this.removeCaptcha = _this.removeCaptcha.bind(_assertThisInitialized(_this));\n    _this.isReady = _this.isReady.bind(_assertThisInitialized(_this)); // Event Handlers\n\n    _this.loadCaptcha = _this.loadCaptcha.bind(_assertThisInitialized(_this));\n    _this.handleOnLoad = _this.handleOnLoad.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.handleExpire = _this.handleExpire.bind(_assertThisInitialized(_this));\n    _this.handleError = _this.handleError.bind(_assertThisInitialized(_this));\n    _this.handleOpen = _this.handleOpen.bind(_assertThisInitialized(_this));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_this));\n    _this.handleChallengeExpired = _this.handleChallengeExpired.bind(_assertThisInitialized(_this));\n    var isApiReady = typeof hcaptcha !== 'undefined';\n    _this.ref = /*#__PURE__*/React.createRef();\n    _this.apiScriptRequested = false;\n    _this.state = {\n      isApiReady: isApiReady,\n      isRemoved: false,\n      elementId: props.id,\n      captchaId: ''\n    };\n    return _this;\n  }\n\n  var _proto = HCaptcha.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Once captcha is mounted intialize hCaptcha - hCaptcha\n    var isApiReady = this.state.isApiReady;\n    /*\n     * Check if hCaptcha has already been loaded,\n     * If Yes, render the captcha\n     * If No, create script tag and wait to render the captcha\n     */\n\n    if (isApiReady) {\n      this.renderCaptcha();\n      return;\n    }\n\n    this.loadCaptcha();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    } // Reset any stored variables / timers when unmounting\n\n\n    hcaptcha.reset(captchaId);\n    hcaptcha.remove(captchaId);\n  };\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    // Prevent component re-rendering when these internal state variables are updated\n    if (this.state.isApiReady !== nextState.isApiReady || this.state.isRemoved !== nextState.isRemoved) {\n      return false;\n    }\n\n    return true;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this; // Prop Keys that could change\n\n\n    var keys = ['sitekey', 'size', 'theme', 'tabindex', 'languageOverride', 'endpoint']; // See if any props changed during component update\n\n    var match = keys.every(function (key) {\n      return prevProps[key] === _this2.props[key];\n    }); // If they have changed, remove current captcha and render a new one\n\n    if (!match) {\n      this.removeCaptcha(function () {\n        _this2.renderCaptcha();\n      });\n    }\n  };\n\n  _proto.loadCaptcha = function loadCaptcha() {\n    if (this.apiScriptRequested) {\n      return;\n    }\n\n    var _this$props = this.props,\n        apihost = _this$props.apihost,\n        assethost = _this$props.assethost,\n        endpoint = _this$props.endpoint,\n        host = _this$props.host,\n        imghost = _this$props.imghost,\n        hl = _this$props.languageOverride,\n        reCaptchaCompat = _this$props.reCaptchaCompat,\n        reportapi = _this$props.reportapi,\n        sentry = _this$props.sentry,\n        custom = _this$props.custom;\n    var mountParams = {\n      apihost: apihost,\n      assethost: assethost,\n      endpoint: endpoint,\n      hl: hl,\n      host: host,\n      imghost: imghost,\n      recaptchacompat: reCaptchaCompat === false ? \"off\" : null,\n      reportapi: reportapi,\n      sentry: sentry,\n      custom: custom\n    };\n    mountCaptchaScript(mountParams).then(this.handleOnLoad)[\"catch\"](this.handleError);\n    this.apiScriptRequested = true;\n  };\n\n  _proto.renderCaptcha = function renderCaptcha(onReady) {\n    var isApiReady = this.state.isApiReady;\n    if (!isApiReady) return;\n    var renderParams = Object.assign({\n      \"open-callback\": this.handleOpen,\n      \"close-callback\": this.handleClose,\n      \"error-callback\": this.handleError,\n      \"chalexpired-callback\": this.handleChallengeExpired,\n      \"expired-callback\": this.handleExpire,\n      \"callback\": this.handleSubmit\n    }, this.props, {\n      hl: this.props.hl || this.props.languageOverride,\n      languageOverride: undefined\n    }); //Render hCaptcha widget and provide necessary callbacks - hCaptcha\n\n    var captchaId = hcaptcha.render(this.ref.current, renderParams);\n    this.setState({\n      isRemoved: false,\n      captchaId: captchaId\n    }, function () {\n      onReady && onReady();\n    });\n  };\n\n  _proto.resetCaptcha = function resetCaptcha() {\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    } // Reset captcha state, removes stored token and unticks checkbox\n\n\n    hcaptcha.reset(captchaId);\n  };\n\n  _proto.removeCaptcha = function removeCaptcha(callback) {\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    }\n\n    this.setState({\n      isRemoved: true\n    }, function () {\n      hcaptcha.remove(captchaId);\n      callback && callback();\n    });\n  };\n\n  _proto.handleOnLoad = function handleOnLoad() {\n    var _this3 = this;\n\n    this.setState({\n      isApiReady: true\n    }, function () {\n      // render captcha and wait for captcha id\n      _this3.renderCaptcha(function () {\n        // trigger onLoad if it exists\n        var onLoad = _this3.props.onLoad;\n        if (onLoad) onLoad();\n      });\n    });\n  };\n\n  _proto.handleSubmit = function handleSubmit(event) {\n    var onVerify = this.props.onVerify;\n    var _this$state = this.state,\n        isRemoved = _this$state.isRemoved,\n        captchaId = _this$state.captchaId;\n    if (typeof hcaptcha === 'undefined' || isRemoved) return;\n    var token = hcaptcha.getResponse(captchaId); //Get response token from hCaptcha widget\n\n    var ekey = hcaptcha.getRespKey(captchaId); //Get current challenge session id from hCaptcha widget\n\n    onVerify(token, ekey); //Dispatch event to verify user response\n  };\n\n  _proto.handleExpire = function handleExpire() {\n    var onExpire = this.props.onExpire;\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    }\n\n    hcaptcha.reset(captchaId); // If hCaptcha runs into error, reset captcha - hCaptcha\n\n    if (onExpire) onExpire();\n  };\n\n  _proto.handleError = function handleError(event) {\n    var onError = this.props.onError;\n    var captchaId = this.state.captchaId;\n\n    if (this.isReady()) {\n      // If hCaptcha runs into error, reset captcha - hCaptcha\n      hcaptcha.reset(captchaId);\n    }\n\n    if (onError) onError(event);\n  };\n\n  _proto.isReady = function isReady() {\n    var _this$state2 = this.state,\n        isApiReady = _this$state2.isApiReady,\n        isRemoved = _this$state2.isRemoved;\n    return isApiReady && !isRemoved;\n  };\n\n  _proto.handleOpen = function handleOpen() {\n    if (!this.isReady() || !this.props.onOpen) {\n      return;\n    }\n\n    this.props.onOpen();\n  };\n\n  _proto.handleClose = function handleClose() {\n    if (!this.isReady() || !this.props.onClose) {\n      return;\n    }\n\n    this.props.onClose();\n  };\n\n  _proto.handleChallengeExpired = function handleChallengeExpired() {\n    if (!this.isReady() || !this.props.onChalExpired) {\n      return;\n    }\n\n    this.props.onChalExpired();\n  };\n\n  _proto.execute = function execute(opts) {\n    if (opts === void 0) {\n      opts = null;\n    }\n\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    }\n\n    if (opts && typeof opts !== \"object\") {\n      opts = null;\n    }\n\n    return hcaptcha.execute(captchaId, opts);\n  };\n\n  _proto.setData = function setData(data) {\n    var captchaId = this.state.captchaId;\n\n    if (!this.isReady()) {\n      return;\n    }\n\n    if (data && typeof data !== \"object\") {\n      data = null;\n    }\n\n    hcaptcha.setData(captchaId, data);\n  };\n\n  _proto.getResponse = function getResponse() {\n    return hcaptcha.getResponse(this.state.captchaId);\n  };\n\n  _proto.getRespKey = function getRespKey() {\n    return hcaptcha.getRespKey(this.state.captchaId);\n  };\n\n  _proto.render = function render() {\n    var elementId = this.state.elementId;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.ref,\n      id: elementId\n    });\n  };\n\n  return HCaptcha;\n}(React.Component);\n\nexport default HCaptcha;","function generateQuery(params) {\n  return Object.entries(params).filter(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return value || value === false;\n  }).map(function (_ref2) {\n    var key = _ref2[0],\n        value = _ref2[1];\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n  }).join(\"&\");\n}\n\n;\nexport { generateQuery };","// extracted by mini-css-extract-plugin\nexport var captcha = \"scavengerHunt-module--captcha--mpE0a\";\nexport var centeredContent = \"scavengerHunt-module--centered-content--fXkpf\";\nexport var completedIndicator = \"scavengerHunt-module--completed-indicator--h1JmL\";\nexport var currentIndicator = \"scavengerHunt-module--current-indicator--mP-DP\";\nexport var discordCheckbox = \"scavengerHunt-module--discord-checkbox--0zGVV\";\nexport var discordCheckboxLabel = \"scavengerHunt-module--discord-checkbox-label--Nv83L\";\nexport var error = \"scavengerHunt-module--error--F+VlT\";\nexport var errorMessage = \"scavengerHunt-module--error-message--t2+A2\";\nexport var hide = \"scavengerHunt-module--hide--NPtwX\";\nexport var hintButton = \"scavengerHunt-module--hint-button--gqhMg\";\nexport var hintInput = \"scavengerHunt-module--hint-input--3YkW5\";\nexport var hintText = \"scavengerHunt-module--hint-text--LlMKK\";\nexport var hintTitle = \"scavengerHunt-module--hint-title--41bRP\";\nexport var hintWrapper = \"scavengerHunt-module--hint-wrapper--PUuI+\";\nexport var indicator = \"scavengerHunt-module--indicator--I-oVR\";\nexport var indicatorWrapper = \"scavengerHunt-module--indicator-wrapper--nlQoO\";\nexport var loader = \"scavengerHunt-module--loader--8fNJJ\";\nexport var noError = \"scavengerHunt-module--noError--oGUJE\";\nexport var scavengerHuntTitle = \"scavengerHunt-module--scavenger-hunt-title--7acVu\";\nexport var shake = \"scavengerHunt-module--shake--wlBfa\";\nexport var updateMessage = \"scavengerHunt-module--update-message--b9wq5\";\nexport var winnerInfo = \"scavengerHunt-module--winner-info--Gz+T+\";","import { supabase } from '../utils/supabase'\n\nconst noHuntError = new Error(\"no hunt available\")\nconst noHintsError = new Error(\"no hints were found\")\nconst winnerError = new Error(\"no winners were found\")\n\n/**\n * Get latest Hunt ID.\n * @returns ID of the latest available Scavenger Hunt.\n */\nasync function getHuntID() {\n\n  // Get ID for the newest Hunt available\n  const { data: newestHunt, error: error } = await supabase\n    .from('hunts')\n    .select('*')\n    .eq('is_available', true)\n\n  if (newestHunt == null || newestHunt.length < 1 || newestHunt[0].id == null) {\n    throw noHuntError\n  }\n\n  return newestHunt[0].id\n}\n\n/**\n * Get Hint Data\n * @returns All Hint data from Database for an ID\n */\n async function getHintDataFor(id) {\n\n  const { data: hintsData, error: error } = await supabase\n    .from('hints')\n    .select('*')\n    .eq('hunt_id', id)\n\n  return hintsData\n}\n\n/**\n * Get Winner Data\n * @returns All Winner data from Database for an ID\n */\n async function doesHuntHaveWinnerWith(id) {\n\n  const { data: winnersData, error: error } = await supabase\n    .from('winners')\n    .select('*')\n    .eq('hunt_id', id)\n\n  return winnersData == null || winnersData.length > 0\n}\n\n/**\n * Input new winner into the Database\n */\n async function addWinnerToDatabase(huntID, discordID) {\n\n  const { data, error } = await supabase\n    .from('winners')\n    .insert([{ hunt_id: huntID, discord_id: discordID }])\n}\n\n/**\n * Get all Hints for the latest Scavenger Hunt.\n * @returns Object of Hints from the Hints table.\n */\nasync function getHints() {\n\n  return getHuntID()\n  .then((newestHuntID) => {\n    return getHintDataFor(newestHuntID)\n  })\n  .then((hintsData) => {\n    if (hintsData != null && hintsData.length < 0) {\n      throw noHintsError\n    }\n\n    return hintsData\n  })\n  .catch((e) => {\n    console.log(e)\n    throw noHuntError\n  })\n}\n\n/**\n * Get all Winners for the latest Scavenger Hunt.\n * @returns Object of Winners from the Winners table.\n */\nasync function getWinners() {\n  return getHuntID()\n  .then((newestHuntID) => {\n    return doesHuntHaveWinnerWith(newestHuntID)\n  })\n  .then((doesHaveWinner) => {\n    return doesHaveWinner\n  })\n  .catch((e) => {\n    console.log(e)\n    throw noHuntError\n  })\n}\n\n/**\n * Input new winner into the Winners table.\n */\n async function inputNewWinner(discordID) {\n  return getHuntID()\n  .then((newestHuntID) => {\n    addWinnerToDatabase(newestHuntID, discordID)\n  })\n  .catch((e) => {\n    console.log(e)\n    throw winnerError\n  })\n}\n\nexport { getHints, getWinners, inputNewWinner };","import React, { useEffect, useState, useRef, useInsertionEffect } from 'react'\nimport {Helmet} from \"react-helmet\";\nimport Layout from '../components/layout';\nimport HCaptcha from \"@hcaptcha/react-hcaptcha\"\nimport '../styles/general.scss';\nimport * as styles from '../styles/scavengerHunt.module.scss';\n\nimport Loader from '../components/loader'\n\nimport { getHints, getWinners, inputNewWinner } from \"../utils/hints\";\n\nfunction ScavengerHuntPage() {\n\n  // List of Hints\n  const [hints, setHints] = useState([])\n\n  // List of Winners\n  const [winnerAlreadyExists, setWinnerAlreadyExists] = useState([])\n\n  // Current Hint Number\n  const [currentHintNo, setCurrentHintNo] = useState(0)\n\n  // User Input\n  const [userAnswer, setUserAnswer] = useState(\"\")\n  const [answerIncorrect, setAnswerIncorrect] = useState(false)\n\n  const [userDiscordID, setUserDiscordID] = useState(\"\")\n  const [userDiscordIDAgreement, setUserDiscordIDAgreement] = useState(false)\n  const [discordIDIncorrect, setDiscordIDIncorrect] = useState(false)\n  const [userDiscordIDProcessed, setUserDiscordIDProcessed] = useState(false)\n\n  // Show loading animation\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Output Messages\n  const [message, setMessage] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // Captcha Reference\n  const captchaRef = useRef();\n  const [userVerifiedHuman, setUserVerifiedHuman] = useState(false)\n\n\n\n  /*\n    Get Hints from the database and store in hints\n  */\n  useEffect(() => {\n    setIsLoading(true)\n\n    getHints().then((dbList) => {\n      var tempHintList = []\n  \n      Object.values(dbList).map((hint) => {\n        tempHintList.push(hint);\n      });\n  \n      setHints(tempHintList)\n      setMessage(\"\")\n    }).catch((e) => {\n      if (e.message.includes(\"available\")) {\n        setErrorMessage(\"There is no Scavenger Hunt currently available.\")\n      } else {\n        setErrorMessage(\"An error occurred while retrieving the scavenger hunt data. Please contact a member of Comté.\")\n      }\n    }).finally (() => {\n      setIsLoading(false)\n    })\n  }, [])\n\n  /*\n    Get Winners from the database and store in winners\n  */\n  useEffect(() => {\n    if (currentHintNo == 0 || currentHintNo < hints.length) {\n      return\n    }\n    \n    setIsLoading(true)\n\n    getWinners().then((winnerAlreadyExists) => {\n      setWinnerAlreadyExists(winnerAlreadyExists)\n    }).catch(() => {\n      setErrorMessage(\"An error occurred while retrieving the scavenger hunt data. Please contact a member of Comté.\")\n    }).finally (() => {\n      setIsLoading(false)\n    })\n    \n  }, [currentHintNo])\n\n  /*\n    Manage user responses input\n  */\n  let questionResponse = () => {\n    setAnswerIncorrect(false)\n\n    if (hints[currentHintNo].answers.includes(userAnswer.toLowerCase())) {\n      setMessage(\"Correct! The next hint has been revealed to you.\")\n\n      // Increment hint number\n      setCurrentHintNo(currentHintNo + 1)\n      \n      if (currentHintNo >= hints.length) {\n        setMessage(\"Congrats, you've won the Scavenger Hunt! If you were first you can claim the prize!\")\n      }\n\n      setUserAnswer(\"\")\n\n    } else {\n      setAnswerIncorrect(true)\n      setMessage(\"Try again!\")\n    }\n  };\n\n  /*\n    Manage user Discord ID input\n  */\n  let discordIDResponse = () => {\n    setDiscordIDIncorrect(false)\n\n    // Assert whether Discord ID is valid\n    if (userDiscordID == null || !userDiscordID.match(/^\\w+#\\d{4}$/g)) {\n      setDiscordIDIncorrect(true)\n      setMessage(\"Your Discord username is not valid.\")\n      return\n    }\n\n    // Assert that the checkbox is selected\n    if (!userDiscordIDAgreement) {\n      setMessage(\"You need to agree to the storage and publication of your Discord username to continue.\")\n      return\n    }\n\n    // Assert that the user is human\n    if (!userVerifiedHuman) {\n      setMessage(\"You need to verify using the captcha.\")\n      return\n    }\n\n    setIsLoading(true)\n\n    inputNewWinner(userDiscordID).then(() => {\n      setUserDiscordIDProcessed(true)\n      setMessage(\"Discord ID: \" + userDiscordID + \" uploaded!\")\n    }).catch(() => {\n      setMessage(\"An error occurred while processing your Discord username.\")\n    }).finally (() => {\n      setIsLoading(false)\n    })\n  };\n\n  return (\n    <>\n    <Helmet>\n      <title>Inter-Uni PokéSoc - Scavenger Hunt</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"/>\n    </Helmet>\n\n    <Layout>\n      <main className=\"page-content\">\n        <h1 className={[\"shiny-title\", styles.scavengerHuntTitle].join(' ')}>Scavenger Hunt</h1>\n\n        {/* Loading Indicator */}\n        { isLoading &&\n          <div className={styles.loader}><Loader /></div>\n        }\n\n        <div id={styles.centeredContent}>\n        { hints.length > 0 && errorMessage == null && !isLoading &&\n          <>\n            <section id={styles.hintWrapper}>\n              {/* Indicator of Questions */}\n              <section id={ styles.indicatorWrapper }>\n                {hints.map((element, index) => {\n                  return <div className={\n                    [(index == currentHintNo ? styles.currentIndicator : \"\"),\n                    (index < currentHintNo ? styles.completedIndicator : \"\"),\n                    styles.indicator\n                    ].join(' ')\n                  }></div>\n                })}\n              </section>\n\n              {/* Hint UI */}\n              { currentHintNo < hints.length &&\n                <>\n                  <h2 id={styles.hintTitle} className=\"medium-title\">Hint { currentHintNo + 1 }</h2>\n                  <p id={styles.hintText}>{ hints[currentHintNo].hint }</p>\n                  <input id={styles.hintInput} className={ answerIncorrect ? styles.error : styles.noError } value={ userAnswer } onInput={ e => setUserAnswer(e.target.value) }></input>\n                  <a id={styles.hintButton} onClick={questionResponse}>Check Answer</a>\n                  <p id={styles.updateMessage}>{ message }</p>\n                </>\n              }\n\n              {/* On Hunt Completion UI */}\n              { !isLoading && currentHintNo >= hints.length &&\n                <>\n                  {/* TODO: winnerAlreadyExists ternary is wrong here fix to something like !winnerAlreadyExists */}\n                  <h2 id={styles.hintTitle} className={!winnerAlreadyExists ? ['medium-title', 'shiny-title'].join(' ') : \"medium-title\"}>\n                    { !winnerAlreadyExists ? \"Congratulations Winner\" : \"Scavenger Hunt Complete\" }\n                  </h2>\n\n                  {/* Enter Winner Details UI */}\n                  { !winnerAlreadyExists && !userDiscordIDProcessed &&\n                    <>\n                      <p className={styles.winnerInfo}>Amazing! You were first to complete the Scavenger Hunt!</p>\n                      <p className={styles.winnerInfo}>Please enter your Discord username below to confirm your win.</p>\n                      <input id={styles.hintInput} className={ discordIDIncorrect ? styles.error : styles.noError } value={ userDiscordID } onInput={ e => setUserDiscordID(e.target.value) }></input>\n                      <label className={ styles.discordCheckboxLabel }>\n                        <input type=\"checkbox\" className={ styles.discordCheckbox } onChange={ (e) => setUserDiscordIDAgreement(e) } />\n                        I agree to have my Discord username stored and published on this website\n                      </label>\n                      <div className={ styles.captcha }>\n                        <HCaptcha\n                          ref={captchaRef}\n                          sitekey={\n                            // '10000000-ffff-ffff-ffff-000000000001'\n                            '56ee2c1d-d19a-4d66-a1a5-ca6f4b57998f'\n                          }\n                          theme=\"light\"\n                          onVerify={() => setUserVerifiedHuman(true)}\n                        />\n                      </div>\n                      <a id={styles.hintButton} onClick={discordIDResponse}>Submit</a>\n                      <p id={styles.updateMessage}>{ message }</p>\n                    </>\n                  }\n\n                  {/* Winner Already Exists UI */}\n                  { winnerAlreadyExists && !userDiscordIDProcessed &&\n                    <p className={styles.winnerInfo}>You have completed the Scavenger Hunt. You may have not been first this time, but there'll be another hunt soon!</p>\n                  }\n\n                  {/* Winner Data Added UI */}\n                  { userDiscordIDProcessed &&\n                    <p className={styles.winnerInfo}>Your winner data has been added { userDiscordID }! Now go and boast about it on the Discord server :).</p>\n                  }\n                </>\n              }\n            </section>\n          </>\n        }\n        </div>\n        \n        {/* Display Error Message */}\n        <section className=\"page-section\">\n          <p id=\"error-message\" className={ styles.errorMessage }>\n            { errorMessage != null ? errorMessage : \"\" }\n          </p>\n        </section>\n\n      </main>\n\n    </Layout>\n    </>\n  );\n}\n\nexport default ScavengerHuntPage;"],"names":["resolveFn","rejectFn","SCRIPT_ID","HCAPTCHA_LOAD_FN_NAME","mountPromise","Promise","resolve","reject","mountCaptchaScript","params","document","getElementById","window","domain","apihost","script","createElement","id","src","async","onerror","event","query","Object","entries","filter","_ref","value","map","_ref2","key","encodeURIComponent","join","generateQuery","head","appendChild","_React$Component","HCaptcha","props","_this","call","this","renderCaptcha","bind","resetCaptcha","removeCaptcha","isReady","loadCaptcha","handleOnLoad","handleSubmit","handleExpire","handleError","handleOpen","handleClose","handleChallengeExpired","isApiReady","hcaptcha","ref","apiScriptRequested","state","isRemoved","elementId","captchaId","_proto","prototype","componentDidMount","componentWillUnmount","reset","remove","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","_this2","every","_this$props","assethost","endpoint","host","imghost","hl","languageOverride","reCaptchaCompat","reportapi","sentry","custom","recaptchacompat","then","onReady","renderParams","assign","undefined","render","current","setState","callback","_this3","onLoad","onVerify","_this$state","getResponse","getRespKey","onExpire","onError","_this$state2","onOpen","onClose","onChalExpired","execute","opts","setData","data","error","hintButton","hintInput","hintTitle","indicator","noError","scavengerHuntTitle","updateMessage","winnerInfo","noHuntError","Error","noHintsError","winnerError","getHuntID","newestHunt","supabase","select","eq","length","getHints","newestHuntID","hintsData","getHintDataFor","catch","e","console","log","getWinners","winnersData","doesHuntHaveWinnerWith","doesHaveWinner","inputNewWinner","discordID","huntID","insert","hunt_id","discord_id","addWinnerToDatabase","hints","setHints","useState","winnerAlreadyExists","setWinnerAlreadyExists","currentHintNo","setCurrentHintNo","userAnswer","setUserAnswer","answerIncorrect","setAnswerIncorrect","userDiscordID","setUserDiscordID","userDiscordIDAgreement","setUserDiscordIDAgreement","discordIDIncorrect","setDiscordIDIncorrect","userDiscordIDProcessed","setUserDiscordIDProcessed","isLoading","setIsLoading","message","setMessage","errorMessage","setErrorMessage","captchaRef","useRef","userVerifiedHuman","setUserVerifiedHuman","useEffect","dbList","tempHintList","values","hint","push","includes","finally","Helmet","name","content","className","styles","element","index","onInput","target","onClick","answers","toLowerCase","type","onChange","sitekey","theme","match"],"sourceRoot":""}